{"ast":null,"code":"import hotkeys from 'hotkeys-js';\nimport { useRef, useCallback, useEffect } from 'react';\n/**\r\n * @deprecated Use isHotkeyPressed instead. Will be removed version 4.\r\n */\n\nfunction useIsHotkeyPressed() {\n  return hotkeys.isPressed;\n}\n\nhotkeys.filter = function () {\n  return true;\n};\n\nvar tagFilter = function tagFilter(_ref, enableOnTags) {\n  var target = _ref.target;\n  var targetTagName = target && target.tagName;\n  return Boolean(targetTagName && enableOnTags && enableOnTags.includes(targetTagName));\n};\n\nvar isKeyboardEventTriggeredByInput = function isKeyboardEventTriggeredByInput(ev) {\n  return tagFilter(ev, ['INPUT', 'TEXTAREA', 'SELECT']);\n};\n\nfunction useHotkeys(keys, callback, options, deps) {\n  if (options instanceof Array) {\n    deps = options;\n    options = undefined;\n  }\n\n  var _ref2 = options || {},\n      enableOnTags = _ref2.enableOnTags,\n      filter = _ref2.filter,\n      keyup = _ref2.keyup,\n      keydown = _ref2.keydown,\n      _ref2$filterPreventDe = _ref2.filterPreventDefault,\n      filterPreventDefault = _ref2$filterPreventDe === void 0 ? true : _ref2$filterPreventDe,\n      _ref2$enabled = _ref2.enabled,\n      enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n      _ref2$enableOnContent = _ref2.enableOnContentEditable,\n      enableOnContentEditable = _ref2$enableOnContent === void 0 ? false : _ref2$enableOnContent;\n\n  var ref = useRef(null); // The return value of this callback determines if the browsers default behavior is prevented.\n\n  var memoisedCallback = useCallback(function (keyboardEvent, hotkeysEvent) {\n    var _keyboardEvent$target;\n\n    if (filter && !filter(keyboardEvent)) {\n      return !filterPreventDefault;\n    } // Check whether the hotkeys was triggered inside an input and that input is enabled or if it was triggered by a content editable tag and it is enabled.\n\n\n    if (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags) || (_keyboardEvent$target = keyboardEvent.target) != null && _keyboardEvent$target.isContentEditable && !enableOnContentEditable) {\n      return true;\n    }\n\n    if (ref.current === null || document.activeElement === ref.current) {\n      callback(keyboardEvent, hotkeysEvent);\n      return true;\n    }\n\n    return false;\n  }, deps ? [ref, enableOnTags, filter].concat(deps) : [ref, enableOnTags, filter]);\n  useEffect(function () {\n    if (!enabled) {\n      hotkeys.unbind(keys, memoisedCallback);\n      return;\n    } // In this case keydown is likely undefined, so we set it to false, since hotkeys needs the `keydown` key to have a value.\n\n\n    if (keyup && keydown !== true) {\n      options.keydown = false;\n    }\n\n    hotkeys(keys, options || {}, memoisedCallback);\n    return function () {\n      return hotkeys.unbind(keys, memoisedCallback);\n    };\n  }, [memoisedCallback, keys, enabled]);\n  return ref;\n}\n\nvar isHotkeyPressed = hotkeys.isPressed;\nexport { isHotkeyPressed, useHotkeys, useIsHotkeyPressed };","map":{"version":3,"sources":["/Users/jonathan/Documents/GitHub/full-react-template/node_modules/react-hotkeys-hook/src/useIsHotkeyPressed.ts","/Users/jonathan/Documents/GitHub/full-react-template/node_modules/react-hotkeys-hook/src/useHotkeys.ts","/Users/jonathan/Documents/GitHub/full-react-template/node_modules/react-hotkeys-hook/src/index.ts"],"names":["useIsHotkeyPressed","hotkeys","tagFilter","target","targetTagName","Boolean","enableOnTags","isKeyboardEventTriggeredByInput","useHotkeys","keys","callback","options","deps","filter","keyup","keydown","filterPreventDefault","enabled","enableOnContentEditable","ref","useRef","memoisedCallback","useCallback","document","useEffect","isHotkeyPressed"],"mappings":"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","sourcesContent":["import hotkeys from 'hotkeys-js';\n\n/**\n * @deprecated Use isHotkeyPressed instead. Will be removed version 4.\n */\nexport function useIsHotkeyPressed() {\n  return hotkeys.isPressed;\n}","import hotkeys, { HotkeysEvent, KeyHandler } from 'hotkeys-js';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\ntype AvailableTags = 'INPUT' | 'TEXTAREA' | 'SELECT';\n\n// We implement our own custom filter system.\nhotkeys.filter = () => true;\n\nconst tagFilter = ({ target }: KeyboardEvent, enableOnTags?: AvailableTags[]) => {\n  const targetTagName = target && (target as HTMLElement).tagName;\n\n  return Boolean((targetTagName && enableOnTags && enableOnTags.includes(targetTagName as AvailableTags)));\n};\n\nconst isKeyboardEventTriggeredByInput = (ev: KeyboardEvent) => {\n  return tagFilter(ev, ['INPUT', 'TEXTAREA', 'SELECT']);\n};\n\nexport type Options = {\n  enabled?: boolean; // Main setting that determines if the hotkey is enabled or not. (Default: true)\n  filter?: typeof hotkeys.filter; // A filter function returning whether the callback should get triggered or not. (Default: undefined)\n  filterPreventDefault?: boolean; // Prevent default browser behavior if the filter function returns false. (Default: true)\n  enableOnTags?: AvailableTags[]; // Enable hotkeys on a list of tags. (Default: [])\n  enableOnContentEditable?: boolean; // Enable hotkeys on tags with contentEditable props. (Default: false)\n  splitKey?: string; // Character to split keys in hotkeys combinations. (Default +)\n  scope?: string; // Scope. Currently not doing anything.\n  keyup?: boolean; // Trigger on keyup event? (Default: undefined)\n  keydown?: boolean; // Trigger on keydown event? (Default: true)\n};\n\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: Options, deps?: any[]): React.MutableRefObject<T | null>;\nexport function useHotkeys<T extends Element>(keys: string, callback: KeyHandler, options?: any[] | Options, deps?: any[]): React.MutableRefObject<T | null> {\n  if (options instanceof Array) {\n    deps = options;\n    options = undefined;\n  }\n\n  const {\n    enableOnTags,\n    filter,\n    keyup,\n    keydown,\n    filterPreventDefault = true,\n    enabled = true,\n    enableOnContentEditable = false,\n  } = options as Options || {};\n  const ref = useRef<T | null>(null);\n\n  // The return value of this callback determines if the browsers default behavior is prevented.\n  const memoisedCallback = useCallback((keyboardEvent: KeyboardEvent, hotkeysEvent: HotkeysEvent) => {\n    if (filter && !filter(keyboardEvent)) {\n      return !filterPreventDefault;\n    }\n\n    // Check whether the hotkeys was triggered inside an input and that input is enabled or if it was triggered by a content editable tag and it is enabled.\n    if (\n      (isKeyboardEventTriggeredByInput(keyboardEvent) && !tagFilter(keyboardEvent, enableOnTags))\n      || ((keyboardEvent.target as HTMLElement)?.isContentEditable && !enableOnContentEditable)\n    ) {\n      return true;\n    }\n\n    if (ref.current === null || document.activeElement === ref.current) {\n      callback(keyboardEvent, hotkeysEvent);\n      return true;\n    }\n\n    return false;\n  }, deps ? [ref, enableOnTags, filter, ...deps] : [ref, enableOnTags, filter]);\n\n  useEffect(() => {\n    if (!enabled) {\n      hotkeys.unbind(keys, memoisedCallback);\n\n      return;\n    }\n\n    // In this case keydown is likely undefined, so we set it to false, since hotkeys needs the `keydown` key to have a value.\n    if (keyup && keydown !== true) {\n      (options as Options).keydown = false;\n    }\n\n    hotkeys(keys, (options as Options) || {}, memoisedCallback);\n\n    return () => hotkeys.unbind(keys, memoisedCallback);\n  }, [memoisedCallback, keys, enabled]);\n\n  return ref;\n}\n","import { useIsHotkeyPressed } from './useIsHotkeyPressed';\nimport { useHotkeys, Options } from './useHotkeys';\nimport hotkeys from 'hotkeys-js';\n\nconst isHotkeyPressed = hotkeys.isPressed;\n\nexport { useHotkeys, useIsHotkeyPressed, isHotkeyPressed, Options };"]},"metadata":{},"sourceType":"module"}
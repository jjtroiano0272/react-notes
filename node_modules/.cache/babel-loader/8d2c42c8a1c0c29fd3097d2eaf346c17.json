{"ast":null,"code":"import _slicedToArray from\"/Users/jonathan/Documents/GitHub/full-react-template/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,createContext,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export var ThemeContext=/*#__PURE__*/createContext();export var ThemeProvider=function ThemeProvider(_ref){var children=_ref.children;// Style declarations\nvar darkFontColor='#fff';var darkBgColor='#333';var darkPrimaryColor='';var darkSecondaryColor='';var darkHeadingColor='';// Light Declarations\nvar lightFontColor='#333';var lightBgColor='#fff';var lightPrimaryColor='';var lightSecondaryColor='';var lightHeadingColor='';var _useState=useState(false),_useState2=_slicedToArray(_useState,2),darkMode=_useState2[0],setDarkMode=_useState2[1];useEffect(function(){var isDark=localStorage.getItem('dark')==='true';console.log('mounted. isDark: ',isDark);setDarkMode(isDark);// TODO: This would be lovely with a more elegant approach!\n// If it's light mode, remove *-dark classes.\nif(!darkMode){document.querySelector('nav').classList.remove('navbar-dark');document.querySelector('input.form-control').classList.remove('search-dark');document.body.style.color=lightFontColor;document.body.style.backgroundColor=lightBgColor;}else{document.querySelector('nav').classList.add('navbar-dark');document.querySelector('input.form-control').classList.add('search-dark');document.body.style.color=darkFontColor;document.body.style.backgroundColor=darkBgColor;}},[darkMode]);var toggleDarkMode=function toggleDarkMode(){var isDark=!darkMode;localStorage.setItem('dark',JSON.stringify(isDark));setDarkMode(isDark);};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{darkMode:darkMode,toggleDarkMode:toggleDarkMode},children:children});};","map":{"version":3,"sources":["/Users/jonathan/Documents/GitHub/full-react-template/src/components/ThemeProvider.jsx"],"names":["React","useState","createContext","useEffect","ThemeContext","ThemeProvider","children","darkFontColor","darkBgColor","darkPrimaryColor","darkSecondaryColor","darkHeadingColor","lightFontColor","lightBgColor","lightPrimaryColor","lightSecondaryColor","lightHeadingColor","darkMode","setDarkMode","isDark","localStorage","getItem","console","log","document","querySelector","classList","remove","body","style","color","backgroundColor","add","toggleDarkMode","setItem","JSON","stringify"],"mappings":"0IAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,aAA1B,CAAyCC,SAAzC,KAA0D,OAA1D,C,2CAEA,MAAO,IAAMC,CAAAA,YAAY,cAAGF,aAAa,EAAlC,CAEP,MAAO,IAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAC7C;AACA,GAAMC,CAAAA,aAAa,CAAG,MAAtB,CACA,GAAMC,CAAAA,WAAW,CAAG,MAApB,CACA,GAAMC,CAAAA,gBAAgB,CAAG,EAAzB,CACA,GAAMC,CAAAA,kBAAkB,CAAG,EAA3B,CACA,GAAMC,CAAAA,gBAAgB,CAAG,EAAzB,CACA;AACA,GAAMC,CAAAA,cAAc,CAAG,MAAvB,CACA,GAAMC,CAAAA,YAAY,CAAG,MAArB,CACA,GAAMC,CAAAA,iBAAiB,CAAG,EAA1B,CACA,GAAMC,CAAAA,mBAAmB,CAAG,EAA5B,CACA,GAAMC,CAAAA,iBAAiB,CAAG,EAA1B,CAEA,cAAgCf,QAAQ,CAAC,KAAD,CAAxC,wCAAOgB,QAAP,eAAiBC,WAAjB,eAEAf,SAAS,CAAC,UAAM,CACd,GAAMgB,CAAAA,MAAM,CAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAAiC,MAAhD,CACAC,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAiCJ,MAAjC,EACAD,WAAW,CAACC,MAAD,CAAX,CAEA;AACA;AACA,GAAI,CAACF,QAAL,CAAe,CACbO,QAAQ,CAACC,aAAT,CAAuB,KAAvB,EAA8BC,SAA9B,CAAwCC,MAAxC,CAA+C,aAA/C,EACAH,QAAQ,CACLC,aADH,CACiB,oBADjB,EAEGC,SAFH,CAEaC,MAFb,CAEoB,aAFpB,EAGAH,QAAQ,CAACI,IAAT,CAAcC,KAAd,CAAoBC,KAApB,CAA4BlB,cAA5B,CACAY,QAAQ,CAACI,IAAT,CAAcC,KAAd,CAAoBE,eAApB,CAAsClB,YAAtC,CACD,CAPD,IAOO,CACLW,QAAQ,CAACC,aAAT,CAAuB,KAAvB,EAA8BC,SAA9B,CAAwCM,GAAxC,CAA4C,aAA5C,EACAR,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,EAA6CC,SAA7C,CAAuDM,GAAvD,CAA2D,aAA3D,EACAR,QAAQ,CAACI,IAAT,CAAcC,KAAd,CAAoBC,KAApB,CAA4BvB,aAA5B,CACAiB,QAAQ,CAACI,IAAT,CAAcC,KAAd,CAAoBE,eAApB,CAAsCvB,WAAtC,CACD,CACF,CApBQ,CAoBN,CAACS,QAAD,CApBM,CAAT,CAsBA,GAAMgB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAMd,CAAAA,MAAM,CAAG,CAACF,QAAhB,CACAG,YAAY,CAACc,OAAb,CAAqB,MAArB,CAA6BC,IAAI,CAACC,SAAL,CAAejB,MAAf,CAA7B,EACAD,WAAW,CAACC,MAAD,CAAX,CACD,CAJD,CAMA,mBACE,KAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAAEF,QAAQ,CAARA,QAAF,CAAYgB,cAAc,CAAdA,cAAZ,CAA9B,UACG3B,QADH,EADF,CAKD,CAjDM","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\n\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  // Style declarations\n  const darkFontColor = '#fff';\n  const darkBgColor = '#333';\n  const darkPrimaryColor = '';\n  const darkSecondaryColor = '';\n  const darkHeadingColor = '';\n  // Light Declarations\n  const lightFontColor = '#333';\n  const lightBgColor = '#fff';\n  const lightPrimaryColor = '';\n  const lightSecondaryColor = '';\n  const lightHeadingColor = '';\n\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    const isDark = localStorage.getItem('dark') === 'true';\n    console.log('mounted. isDark: ', isDark);\n    setDarkMode(isDark);\n\n    // TODO: This would be lovely with a more elegant approach!\n    // If it's light mode, remove *-dark classes.\n    if (!darkMode) {\n      document.querySelector('nav').classList.remove('navbar-dark');\n      document\n        .querySelector('input.form-control')\n        .classList.remove('search-dark');\n      document.body.style.color = lightFontColor;\n      document.body.style.backgroundColor = lightBgColor;\n    } else {\n      document.querySelector('nav').classList.add('navbar-dark');\n      document.querySelector('input.form-control').classList.add('search-dark');\n      document.body.style.color = darkFontColor;\n      document.body.style.backgroundColor = darkBgColor;\n    }\n  }, [darkMode]);\n\n  const toggleDarkMode = () => {\n    const isDark = !darkMode;\n    localStorage.setItem('dark', JSON.stringify(isDark));\n    setDarkMode(isDark);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
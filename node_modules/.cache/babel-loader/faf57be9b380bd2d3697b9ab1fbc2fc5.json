{"ast":null,"code":"var _jsxFileName = \"/Users/jonathan/Documents/GitHub/full-react-template/src/components/ThemeProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // Style declarations\n  const darkFontColor = '#fff';\n  const darkBgColor = '#333';\n  const darkPrimaryColor = '';\n  const darkSecondaryColor = '';\n  const darkHeadingColor = ''; // Light Declarations\n\n  const lightFontColor = '#333';\n  const lightBgColor = '#fff';\n  const lightPrimaryColor = '';\n  const lightSecondaryColor = '';\n  const lightHeadingColor = '';\n  const [darkMode, setDarkMode] = useState(false);\n  useEffect(() => {\n    const isDark = localStorage.getItem('dark') === 'true';\n    console.log('mounted. isDark: ', isDark);\n    setDarkMode(isDark); // TODO: This would be lovely with a more elegant approach!\n    // If it's light mode, remove *-dark classes.\n\n    if (!darkMode) {\n      document.querySelector('nav').classList.remove('navbar-dark');\n      document.querySelector('input.form-control').classList.remove('search-dark');\n      document.getElementById('nav-logo').classList.remove('color-invert');\n      document.body.style.color = lightFontColor;\n      document.body.style.backgroundColor = lightBgColor;\n    } else {\n      document.querySelector('nav').classList.add('navbar-dark');\n      document.querySelector('input.form-control').classList.add('search-dark');\n      document.getElementById('nav-logo').classList.add('color-invert');\n      document.body.style.color = darkFontColor;\n      document.body.style.backgroundColor = darkBgColor;\n    }\n  }, [darkMode]);\n\n  const toggleDarkMode = () => {\n    const isDark = !darkMode;\n    localStorage.setItem('dark', JSON.stringify(isDark));\n    setDarkMode(isDark);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkMode,\n      toggleDarkMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeProvider, \"n2P3coCVngntCnyS/Nqj+dgR7+U=\");\n\n_c = ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Users/jonathan/Documents/GitHub/full-react-template/src/components/ThemeProvider.jsx"],"names":["React","useState","createContext","useEffect","ThemeContext","ThemeProvider","children","darkFontColor","darkBgColor","darkPrimaryColor","darkSecondaryColor","darkHeadingColor","lightFontColor","lightBgColor","lightPrimaryColor","lightSecondaryColor","lightHeadingColor","darkMode","setDarkMode","isDark","localStorage","getItem","console","log","document","querySelector","classList","remove","getElementById","body","style","color","backgroundColor","add","toggleDarkMode","setItem","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,EAAyCC,SAAzC,QAA0D,OAA1D;;AAEA,OAAO,MAAMC,YAAY,gBAAGF,aAAa,EAAlC;AAEP,OAAO,MAAMG,aAAa,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC7C;AACA,QAAMC,aAAa,GAAG,MAAtB;AACA,QAAMC,WAAW,GAAG,MAApB;AACA,QAAMC,gBAAgB,GAAG,EAAzB;AACA,QAAMC,kBAAkB,GAAG,EAA3B;AACA,QAAMC,gBAAgB,GAAG,EAAzB,CAN6C,CAO7C;;AACA,QAAMC,cAAc,GAAG,MAAvB;AACA,QAAMC,YAAY,GAAG,MAArB;AACA,QAAMC,iBAAiB,GAAG,EAA1B;AACA,QAAMC,mBAAmB,GAAG,EAA5B;AACA,QAAMC,iBAAiB,GAAG,EAA1B;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,MAAiC,MAAhD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,MAAjC;AACAD,IAAAA,WAAW,CAACC,MAAD,CAAX,CAHc,CAKd;AACA;;AACA,QAAI,CAACF,QAAL,EAAe;AACbO,MAAAA,QAAQ,CAACC,aAAT,CAAuB,KAAvB,EAA8BC,SAA9B,CAAwCC,MAAxC,CAA+C,aAA/C;AACAH,MAAAA,QAAQ,CACLC,aADH,CACiB,oBADjB,EAEGC,SAFH,CAEaC,MAFb,CAEoB,aAFpB;AAGAH,MAAAA,QAAQ,CAACI,cAAT,CAAwB,UAAxB,EAAoCF,SAApC,CAA8CC,MAA9C,CAAqD,cAArD;AACAH,MAAAA,QAAQ,CAACK,IAAT,CAAcC,KAAd,CAAoBC,KAApB,GAA4BnB,cAA5B;AACAY,MAAAA,QAAQ,CAACK,IAAT,CAAcC,KAAd,CAAoBE,eAApB,GAAsCnB,YAAtC;AACD,KARD,MAQO;AACLW,MAAAA,QAAQ,CAACC,aAAT,CAAuB,KAAvB,EAA8BC,SAA9B,CAAwCO,GAAxC,CAA4C,aAA5C;AACAT,MAAAA,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,EAA6CC,SAA7C,CAAuDO,GAAvD,CAA2D,aAA3D;AACAT,MAAAA,QAAQ,CAACI,cAAT,CAAwB,UAAxB,EAAoCF,SAApC,CAA8CO,GAA9C,CAAkD,cAAlD;AACAT,MAAAA,QAAQ,CAACK,IAAT,CAAcC,KAAd,CAAoBC,KAApB,GAA4BxB,aAA5B;AACAiB,MAAAA,QAAQ,CAACK,IAAT,CAAcC,KAAd,CAAoBE,eAApB,GAAsCxB,WAAtC;AACD;AACF,GAtBQ,EAsBN,CAACS,QAAD,CAtBM,CAAT;;AAwBA,QAAMiB,cAAc,GAAG,MAAM;AAC3B,UAAMf,MAAM,GAAG,CAACF,QAAhB;AACAG,IAAAA,YAAY,CAACe,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAelB,MAAf,CAA7B;AACAD,IAAAA,WAAW,CAACC,MAAD,CAAX;AACD,GAJD;;AAMA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEF,MAAAA,QAAF;AAAYiB,MAAAA;AAAZ,KAA9B;AAAA,cACG5B;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnDM;;GAAMD,a;;KAAAA,a","sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\n\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  // Style declarations\n  const darkFontColor = '#fff';\n  const darkBgColor = '#333';\n  const darkPrimaryColor = '';\n  const darkSecondaryColor = '';\n  const darkHeadingColor = '';\n  // Light Declarations\n  const lightFontColor = '#333';\n  const lightBgColor = '#fff';\n  const lightPrimaryColor = '';\n  const lightSecondaryColor = '';\n  const lightHeadingColor = '';\n\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    const isDark = localStorage.getItem('dark') === 'true';\n    console.log('mounted. isDark: ', isDark);\n    setDarkMode(isDark);\n\n    // TODO: This would be lovely with a more elegant approach!\n    // If it's light mode, remove *-dark classes.\n    if (!darkMode) {\n      document.querySelector('nav').classList.remove('navbar-dark');\n      document\n        .querySelector('input.form-control')\n        .classList.remove('search-dark');\n      document.getElementById('nav-logo').classList.remove('color-invert');\n      document.body.style.color = lightFontColor;\n      document.body.style.backgroundColor = lightBgColor;\n    } else {\n      document.querySelector('nav').classList.add('navbar-dark');\n      document.querySelector('input.form-control').classList.add('search-dark');\n      document.getElementById('nav-logo').classList.add('color-invert');\n      document.body.style.color = darkFontColor;\n      document.body.style.backgroundColor = darkBgColor;\n    }\n  }, [darkMode]);\n\n  const toggleDarkMode = () => {\n    const isDark = !darkMode;\n    localStorage.setItem('dark', JSON.stringify(isDark));\n    setDarkMode(isDark);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}